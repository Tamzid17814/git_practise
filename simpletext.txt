#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

int main() {
    srand(time(0)); // Seed the random number generator

    int secretNumber = rand() % 100 + 1; // Generate a random number between 1 and 100
    int guess;
    int attempts = 0;

    cout << "Welcome to the Number Guessing Game!" << endl;
    cout << "I have selected a number between 1 and 100. Try to guess it." << endl;

    do {
        cout << "Enter your guess: ";
        cin >> guess;
        attempts++;

        if (guess < secretNumber) {
            cout << "Too low! Try again." << endl;
        } else if (guess > secretNumber) {
            cout << "Too high! Try again." << endl;
        } else {
            cout << "Congratulations! You've guessed the number in " << attempts << " attempts." << endl;
        }
    } while (guess != secretNumber);

    return 0;
}


import sys
import pygame
from settings import Settings
from ship import Ship
from bullet import Bullet
from alien import Alien





class AlienInvasion:
    """Overall class to manage game assets and behaviour."""
    def __init__(self):
        """Intialize the game , and create game resources."""
        pygame.init()
        self.settings = Settings()

        self.screen = pygame.display.set_mode((0,0),pygame.FULLSCREEN)
        self.settings.screen_width =self.screen.get_rect().width
        self.settings.screen_height = self.screen.get_rect().height
        pygame.display.set_caption("Alien Invasion")
        self.ship=Ship(self)
        self.bullets= pygame.sprite.Group()
        self.aliens = pygame.sprite.Group()

        self._create_fleet()


        # Set the background color ash black
        self.bg_color = (230, 230, 230)

    def run_game(self):
        """Start the main loop for the game"""
        while True:
            self._check_events()
            self.ship.update()
            self.bullets.update()


            # get rid of bullets that has disappeared.
            for bullet in self.bullets.copy():
                if bullet.rect.bottom <= 0:
                    self.bullets.remove(bullet)
            print(len(self.bullets))

            self._update_screen()

    def _check_events(self):
            # watch for keyboard and mouse events
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    sys.exit()

                elif event.type == pygame.KEYDOWN:
                    self._check_keydown_events(event)
                elif event.type == pygame.KEYUP:
                    self._check_keyup_events(event)




    def _check_keydown_events(self,event):
        if event.key == pygame.K_RIGHT:
            self .ship.moving_right=True

        elif event.key ==pygame.K_LEFT:
            self.ship.moving_left=True

        elif event.key ==pygame.K_q:
            sys.exit()

        elif event.key == pygame.K_SPACE:
            self._fire_bullet()

    def _check_keyup_events(self, event):
        if event.key == pygame.K_RIGHT:
            self.ship.moving_right = False
        elif event.key == pygame.K_LEFT:
             self.ship.moving_left =False

    def _fire_bullet(self):
        """Create a new bullet and add it to the bullets group """
        new_bullets=Bullet(self)
        self.bullets.add(new_bullets)

    def _create_fleet(self):
        """Create the fleet of alien"""
        #Make an alien
        alien=Alien(self)
        alien_width,alien_height =alien.rect.size
        self.aliens.add(alien)
        alien_width =alien.rect.width
        available_space_x = self.settings.screen_width -(2* alien_width)
        number_alien_x=available_space_x//(2*alien_width)

        #determine the number of rows of alien that fit on screen
        ship_height = self.ship.rect.height
        available_space_y= (self.settings.screen_height - (3* alien_height)-ship_height)
        number_rows = available_space_y // (2* alien_height)

        #Create the first row of aliens
        for row_number in range(number_rows):
           for alien_number in range(number_alien_x):
              self._create_alien(alien_number,row_number)
              #Create an alien and place it on the row.
              self._create_alien(alien_number)

    def _create_alien(self,alien_number):
        alien=Alien(self)
        alien_width,alien_height= alien.rect.size
        alien_width = alien.rect.width
        alien.x=alien_width+ 2* alien_width*alien_number
        alien.rect.x =alien.x
        alien.rect.y =alien.rect.height + 2 * alien.rect.height *num
        self.aliens.add(alien)




    def _update_screen(self):
            # Redraw the screen during  each pass through the loop.
            self.screen.fill(self.settings.bg_color)
            self.ship.blitme()
            for bullet in self.bullets.sprites():
                bullet.draw_bullet()
            self.aliens.draw(self.screen)

            # make the most recent screen visible.
            pygame.display.flip()

#available_space_y = Settings.screen_height - (3 * alien_height)-ship_height
#number_rows =available_height_y//(2*alien_height)
if __name__ == '__main__':
    # Make a game instannce , and run the game
    ai = AlienInvasion()
    ai.run_game()


import pygame
  #  """A class to manage the ship"""

class Ship:

    def __init__(self,ai_game):
        """Intialize the ship and set its starting position"""
        #movement flag
        self.screen = ai_game.screen
        self.settings = ai_game.settings
        self.screen_rect= ai_game.screen.get_rect()



        # Load the ship image and get its rect
        self.image = pygame.image.load('space-invaders.png')
        self.rect = self.image.get_rect()

        # Start each new ship at the bottom center of the screen.
        self.rect.midbottom =self.screen_rect.midbottom
        # store decimal value for the ships horizontal position
        self.x = float(self.rect.x)

        #Movement flag
        self.moving_right=False
        self.moving_left=False



    def update(self):
        """Update ships position based on the movement flag."""
        if self.moving_right and self.rect.right < self.screen_rect.right:
            self.x +=self.settings.ship_speed
        if self.moving_left and self.rect.left > 0:
            self.x -=self.settings.ship_speed

        #Update rect object from from self.x.
        self.rect.x =self.x



    def blitme(self):
        """Draw the ship at its current location"""
        self.screen.blit(self.image,self.rect )


class Settings:

    def __init__(self):
        """Initialize the game settings."""
        # screen setting
        self.screen_width = 800
        self.screen_height = 500
        self.bg_color = (230, 230, 230)
        self.ship_speed = 2


        #bullet settings
        self.bullet_speed= 1.0
        self.bullet_width=3
        self.bullet_height=15
        self.bullet_color=(60,60,60)


import pygame
from pygame.sprite import Sprite

class Bullet(Sprite):
    """A class to manage bullets fired from the ship"""

    def __init__(self,ai_game):
        """Create bullet object  at the ship's current position"""
        super().__init__()
        self.screen = ai_game.screen
        self.settings =ai_game.settings
        self.color =self.settings.bullet_color

        #Create a bullet rect at(0,0) and then set correct position

        self.rect = pygame.Rect(0,0,self.settings.bullet_width,self.settings.bullet_height)
        self.rect.midtop=ai_game.ship.rect.midtop

        # Store the bullet's position as decimal value.

        self.y = float(self.rect.y)

    def update(self):
        """ Move the bullet up the screen"""
        #Update the decimal position  of the bullet.
        self.y-=self.settings.bullet_speed
        #update rect position
        self.rect.y =self.y

    def draw_bullet(self):
        """Draw the bullet to  the screen"""
        pygame.draw.rect(self.screen,self.color,self.rect)
        

import pygame
from pygame.sprite import Sprite


class Alien(Sprite):
    """ A class to represent a single alien in the fleet"""
    def __init__(self,ai_game):
        super().__init__()
        self.screen= ai_game.screen

        #Load the alien image and set its attribute.
        self.image=pygame.image.load('ufo.png')
        self.rect= self.image.get_rect()

        # Start each new alien  near the top left of the screen

        self.rect.x=self.rect.width
        self.rect.y=self.rect.height

        # Store the alien's exact horizontal position.
        self.x=float(self.rect.x)







